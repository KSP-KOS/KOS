// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace kOS.Safe.Compilation.KASM
{
    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();

            regex = new Regex(@"-", RegexOptions.Compiled);
            Patterns.Add(TokenType.NEGATIVE, regex);
            Tokens.Add(TokenType.NEGATIVE);

            regex = new Regex(@"\w+", RegexOptions.Compiled);
            Patterns.Add(TokenType.OPERATION, regex);
            Tokens.Add(TokenType.OPERATION);

            regex = new Regex(@"\.functions:", RegexOptions.Compiled);
            Patterns.Add(TokenType.FUNCTIONSECTIONMARK, regex);
            Tokens.Add(TokenType.FUNCTIONSECTIONMARK);

            regex = new Regex(@"\.init:", RegexOptions.Compiled);
            Patterns.Add(TokenType.INITSECTIONMARK, regex);
            Tokens.Add(TokenType.INITSECTIONMARK);

            regex = new Regex(@"\.main:", RegexOptions.Compiled);
            Patterns.Add(TokenType.MAINSECTIONMARK, regex);
            Tokens.Add(TokenType.MAINSECTIONMARK);

            regex = new Regex(@"[^\.]\w+:", RegexOptions.Compiled);
            Patterns.Add(TokenType.LABEL, regex);
            Tokens.Add(TokenType.LABEL);

            regex = new Regex(@":", RegexOptions.Compiled);
            Patterns.Add(TokenType.WRAPPEDVALUEINDICATOR, regex);
            Tokens.Add(TokenType.WRAPPEDVALUEINDICATOR);

            regex = new Regex(@",", RegexOptions.Compiled);
            Patterns.Add(TokenType.ARGUMENTSEPARATOR, regex);
            Tokens.Add(TokenType.ARGUMENTSEPARATOR);

            regex = new Regex(@"\\u[a-fA-F0-9]{4}", RegexOptions.Compiled);
            Patterns.Add(TokenType.UNICODE_CHAR, regex);
            Tokens.Add(TokenType.UNICODE_CHAR);

            regex = new Regex(@"\\n", RegexOptions.Compiled);
            Patterns.Add(TokenType.ENCODED_NEWLINE, regex);
            Tokens.Add(TokenType.ENCODED_NEWLINE);

            regex = new Regex(@"\\t", RegexOptions.Compiled);
            Patterns.Add(TokenType.ENCODED_TAB, regex);
            Tokens.Add(TokenType.ENCODED_TAB);

            regex = new Regex(@"\\""", RegexOptions.Compiled);
            Patterns.Add(TokenType.ENCODED_QUOTE, regex);
            Tokens.Add(TokenType.ENCODED_QUOTE);

            regex = new Regex(@"\\\\", RegexOptions.Compiled);
            Patterns.Add(TokenType.ENCODED_BACKSLASH, regex);
            Tokens.Add(TokenType.ENCODED_BACKSLASH);

            regex = new Regex(@"[^\""\\]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.OTHER_CHAR, regex);
            Tokens.Add(TokenType.OTHER_CHAR);

            regex = new Regex(@"\""", RegexOptions.Compiled);
            Patterns.Add(TokenType.STRING_DELIMITER, regex);
            Tokens.Add(TokenType.STRING_DELIMITER);

            regex = new Regex(@"[^\S\n]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.WHITESPACE, regex);
            Tokens.Add(TokenType.WHITESPACE);

            regex = new Regex(@"[^\S\n]*((;[^\n|$]*)?(\n|$)[^\S\n]*)+", RegexOptions.Compiled);
            Patterns.Add(TokenType.ENDL, regex);
            Tokens.Add(TokenType.ENDL);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EOF, regex);
            Tokens.Add(TokenType.EOF);

            regex = new Regex(@"null", RegexOptions.Compiled);
            Patterns.Add(TokenType.PSEUDONULL, regex);
            Tokens.Add(TokenType.PSEUDONULL);

            regex = new Regex(@"mark", RegexOptions.Compiled);
            Patterns.Add(TokenType.MARK, regex);
            Tokens.Add(TokenType.MARK);

            regex = new Regex(@"true|false", RegexOptions.Compiled);
            Patterns.Add(TokenType.BOOLEAN, regex);
            Tokens.Add(TokenType.BOOLEAN);

            regex = new Regex(@"\""([^\\\""]|\\[\\nt\""])*\""", RegexOptions.Compiled);
            Patterns.Add(TokenType.STRING, regex);
            Tokens.Add(TokenType.STRING);

            regex = new Regex(@"-?(\d*\.\d+|\d+)(E-?\d+)?d", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOUBLE, regex);
            Tokens.Add(TokenType.DOUBLE);

            regex = new Regex(@"-?(\d*\.\d+|\d+)(E-?\d+)?f", RegexOptions.Compiled);
            Patterns.Add(TokenType.SINGLE, regex);
            Tokens.Add(TokenType.SINGLE);

            regex = new Regex(@"\d+B", RegexOptions.Compiled);
            Patterns.Add(TokenType.BYTE, regex);
            Tokens.Add(TokenType.BYTE);

            regex = new Regex(@"\d+C", RegexOptions.Compiled);
            Patterns.Add(TokenType.CHAR, regex);
            Tokens.Add(TokenType.CHAR);

            regex = new Regex(@"-?(\d*\.\d+|\d+)(E-?\d+)?m", RegexOptions.Compiled);
            Patterns.Add(TokenType.DECIMAL, regex);
            Tokens.Add(TokenType.DECIMAL);

            regex = new Regex(@"-?\d+s", RegexOptions.Compiled);
            Patterns.Add(TokenType.SHORT, regex);
            Tokens.Add(TokenType.SHORT);

            regex = new Regex(@"-?\d+l", RegexOptions.Compiled);
            Patterns.Add(TokenType.LONG, regex);
            Tokens.Add(TokenType.LONG);

            regex = new Regex(@"-?\d+i", RegexOptions.Compiled);
            Patterns.Add(TokenType.INT, regex);
            Tokens.Add(TokenType.INT);

            regex = new Regex(@"\d+S", RegexOptions.Compiled);
            Patterns.Add(TokenType.UNSIGNEDSHORT, regex);
            Tokens.Add(TokenType.UNSIGNEDSHORT);

            regex = new Regex(@"\d+I", RegexOptions.Compiled);
            Patterns.Add(TokenType.UNSIGNEDINT, regex);
            Tokens.Add(TokenType.UNSIGNEDINT);

            regex = new Regex(@"\d+L", RegexOptions.Compiled);
            Patterns.Add(TokenType.UNSIGNEDLONG, regex);
            Tokens.Add(TokenType.UNSIGNEDLONG);

            regex = new Regex(@"-?\d+b", RegexOptions.Compiled);
            Patterns.Add(TokenType.SIGNEDBYTE, regex);
            Tokens.Add(TokenType.SIGNEDBYTE);


        }

        public void Init(string input)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentLine = 0;
            CurrentColumn = 0;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

         /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null 
                && LookAheadToken.Type != TokenType._UNDETERMINED_ 
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, EndPos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len )))
                    {
                        len = m.Length;
                        index = scantokens[i];  
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos < tok.EndPos - 1)
                {
                    tok.Text = Input.Substring(tok.StartPos, 1);
                }

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            DecodedUnicode= 2,
            StringChar= 3,
            ParsedString= 4,
            ParsedInt= 5,
            ParsedBoolean= 6,
            ParsedDouble= 7,
            WrappedValue= 8,
            Argument= 9,
            SecondArgument= 10,
            ArgumentList= 11,
            Instruction= 12,
            Line    = 13,
            CodeBlock= 14,
            FunctionSection= 15,
            InitSection= 16,
            MainSection= 17,
            CodePart= 18,
            Start   = 19,

            //Terminal tokens:
            NEGATIVE= 20,
            OPERATION= 21,
            FUNCTIONSECTIONMARK= 22,
            INITSECTIONMARK= 23,
            MAINSECTIONMARK= 24,
            LABEL   = 25,
            WRAPPEDVALUEINDICATOR= 26,
            ARGUMENTSEPARATOR= 27,
            UNICODE_CHAR= 28,
            ENCODED_NEWLINE= 29,
            ENCODED_TAB= 30,
            ENCODED_QUOTE= 31,
            ENCODED_BACKSLASH= 32,
            OTHER_CHAR= 33,
            STRING_DELIMITER= 34,
            WHITESPACE= 35,
            ENDL    = 36,
            EOF     = 37,
            PSEUDONULL= 38,
            MARK    = 39,
            BOOLEAN = 40,
            STRING  = 41,
            DOUBLE  = 42,
            SINGLE  = 43,
            BYTE    = 44,
            CHAR    = 45,
            DECIMAL = 46,
            SHORT   = 47,
            LONG    = 48,
            INT     = 49,
            UNSIGNEDSHORT= 50,
            UNSIGNEDINT= 51,
            UNSIGNEDLONG= 52,
            SIGNEDBYTE= 53
    }

    public class Token
    {
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public int StartPos { 
            get { return startpos;} 
            set { startpos = value; }
        }

        public int Length { 
            get { return endpos - startpos;} 
        }

        public int EndPos { 
            get { return endpos;} 
            set { endpos = value; }
        }

        public string Text { 
            get { return text;} 
            set { text = value; }
        }

        public List<Token> Skipped { 
            get { return skipped;} 
            set { skipped = value; }
        }
        public object Value { 
            get { return value;} 
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
