.. _user_functions:

**KerboScript** User Functions
==============================

This page covers functions created by you, the user of kerboscript,
rather than the built-in functions provided by kOS.

Help for the new user - What is a Function?
    In programming terminology, there is a commonly used feature of
    many programming languages that works as follows:

    - 1. Create a chunk of program instructions that you don't intend to execute YET.
    - 2. Later, when executing other parts of the program, do the following:
       - A. Remember the current location in the program.
       - B. Jump to the previously created chunk of code from (1) above.
       - C. Run the instructions there.
       - D. Return to where you remembered from (A) and continue from there.

    This feature goes by many different names, with slightly different
    precise meanings: *Subroutines*, *Procedures*, *Functions*, etc.
    For the purposes of kerboscript, we will refer to all uses of this
    feature with the term *Function*, whether it *technically* fits the
    mathematical definition of a "function" or not.

In kerboscript, you can make your own user functions using the
DECLARE FUNCTION command, which has syntax as follows:

  ``declare function`` *identifier* ``{`` *statements* ``}`` *optional dot (.)*

DECLARE PARAMETER
    If your function expects to have parameters passed into it, you can
    use the :ref:`DECLARE PARAMETER <declare parameter>` command to do
    so.  This is the same command as is used to declare parameters for
    running a whole script.  By putting a DECLARE PARAMETER statement
    inside a function, you tell the kerboscript compiler that you want
    the parameter to be for that function, not for the whole script.

DECLARE
    If your function needs to make a local variable, it can do so using
    the :ref:`DECLARE <declare>` command.  Whenever the DECLARE command is
    seen inside a function, the compiler assumes the variable is meant to
    be local to that function's block.  This also works with recursion.
    If you recursively call a function again and again, there will be 
    new copies stacked up of all the local varaibles made with DECLARE,
    but not of the variables implicitly made global without DECLARE.

A more in-depth explanation of kerboscript's scoping rules and how they
work is found :ref:`on another page <scope>`

RETURN
    If your function needs to exit early, and/or if it needs to pass a
    return value back to the user, you can use the RETURN staement to
    do so.  RETURN accepts an optional argument - the value to pass back
    to the caller.  Note that functions in kerboscript are very weakly
    typed with late binding.  You cannot declare the expected return
    type for the function, and it's up to you to ensure that all possible
    returned values are useful and meaningful.

    Note that if you sometimes do and sometimes don't return a value, from
    the same function, as in the example here::

        // A badly designed function, with inconsistency in whether
        // or not it returns a value:
        // 
        DECLARE FUNCTION foo {
           DECLARE PARAMETER x.
           IF X < 0 {
             RETURN. // no return value.
           } ELSE {
             RETURN "hello". // a string return value
           }.
        }.

    Then the kerboscript compiler is not clever enough to detect this
    and warn you about it.  The internal stack will not get corrupted
    by this error, as some experienced programmers might expect upon
    hearing this (because secretly all kerboscript user functions
    return a value even if it's never used, so there's universally
    always something to pop off the stack even for the empty return
    statements.) However, you will still have to deal with the fact
    that the calling program might be getting nulls back some of the
    time if you make this programming error.

    In general, make sure that if you *sometimes* return a value from
    a user function, that you *always* do so in every path through your
    function.

PASSING BY VALUE
    TODO - repeat the same thing was was said about this for built-in
    funtions elsewhere in the docs.


Examples::

    TODO - this should be in-depth.
